{"ast":null,"code":"import _objectSpread from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/c-zentrix/Documents/forms/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/c-zentrix/Documents/forms/src/FormRender.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Spinner from './Spinner/Spinner';\nimport InputBuilder from \"./InputBuilder\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nvar FormRender =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FormRender, _Component);\n\n  function FormRender() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FormRender);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FormRender)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          errorState: ['error'],\n          elementConfig: {\n            type: 'text',\n            label: 'Name',\n            helperText: 'Your Name',\n            variant: \"outlined\",\n            margin: \"normal\",\n            errorText: 'name should be unique'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            helperText: 'Street',\n            label: 'Street',\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            label: 'Postal Code',\n            helperText: 'ZIP Code',\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            label: 'Country',\n            helperText: 'Your Country',\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            label: 'E-mail',\n            helperText: 'Your E-Mail',\n            variant: \"outlined\",\n            margin: \"normal\"\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        dob: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'date',\n            label: 'Birthday',\n            helperText: 'Your Birthday',\n            variant: \"outlined\",\n            margin: \"normal\",\n            InputLabelProps: {\n              shrink: true\n            }\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }],\n            configs: {\n              variant: \"outlined\",\n              margin: \"normal\",\n              label: 'Delivery',\n              InputLabelProps: {\n                shrink: true\n              },\n              helperText: 'Select your delivery method'\n            }\n          },\n          value: '',\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    _this.orderHandler = function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        loading: true\n      });\n\n      var formData = {};\n\n      for (var formElementIdentifier in _this.state.orderForm) {\n        formData[formElementIdentifier] = _this.state.orderForm[formElementIdentifier].value;\n      }\n\n      var order = {\n        ingredients: _this.props.ingredients,\n        price: _this.props.price,\n        orderData: formData\n      };\n      console.log(order);\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = _this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      console.log(updatedFormElement);\n      var formIsValid = true;\n\n      for (var _inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[_inputIdentifier].valid && formIsValid;\n      }\n\n      _this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(FormRender, [{\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      var isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = React.createElement(\"form\", {\n        onSubmit: this.orderHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, formElementsArray.map(function (formElement) {\n        return React.createElement(InputBuilder, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          errorState: formElement.config.errorState,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"Order\"));\n\n      if (this.state.loading) {\n        form = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        style: {\n          padding: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        spacing: 24,\n        justify: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(CardContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, \"Enter your Contact Data\"), form)))));\n    }\n  }]);\n\n  return FormRender;\n}(Component);\n\nexport default FormRender;","map":{"version":3,"sources":["/home/c-zentrix/Documents/forms/src/FormRender.js"],"names":["React","Component","Button","Spinner","InputBuilder","Grid","Card","CardContent","FormRender","state","orderForm","name","elementType","errorState","elementConfig","type","label","helperText","variant","margin","errorText","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","dob","InputLabelProps","shrink","deliveryMethod","options","displayValue","configs","formIsValid","loading","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","order","ingredients","props","price","orderData","console","log","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","rules","isValid","trim","length","formElementsArray","key","push","id","config","form","map","formElement","padding"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;;IAEMC,U;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,SAAS,EAAE;AACPC,QAAAA,IAAI,EAAE;AACFC,UAAAA,WAAW,EAAE,OADX;AAEFC,UAAAA,UAAU,EAAC,CAAC,OAAD,CAFT;AAGFC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,KAAK,EAAE,MAFI;AAGXC,YAAAA,UAAU,EAAE,WAHD;AAIXC,YAAAA,OAAO,EAAE,UAJE;AAKXC,YAAAA,MAAM,EAAE,QALG;AAMXC,YAAAA,SAAS,EAAC;AANC,WAHb;AAWFC,UAAAA,KAAK,EAAE,EAXL;AAYFC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WAZV;AAeFC,UAAAA,KAAK,EAAE,KAfL;AAgBFC,UAAAA,OAAO,EAAE;AAhBP,SADC;AAmBPC,QAAAA,MAAM,EAAE;AACJd,UAAAA,WAAW,EAAE,OADT;AAEJE,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXE,YAAAA,UAAU,EAAE,QAFD;AAGXD,YAAAA,KAAK,EAAE,QAHI;AAIXE,YAAAA,OAAO,EAAE,UAJE;AAKXC,YAAAA,MAAM,EAAE;AALG,WAFX;AASJE,UAAAA,KAAK,EAAE,EATH;AAUJC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WAVR;AAaJC,UAAAA,KAAK,EAAE,KAbH;AAcJC,UAAAA,OAAO,EAAE;AAdL,SAnBD;AAmCPE,QAAAA,OAAO,EAAE;AACLf,UAAAA,WAAW,EAAE,OADR;AAELE,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,KAAK,EAAE,aAFI;AAGXC,YAAAA,UAAU,EAAE,UAHD;AAIXC,YAAAA,OAAO,EAAE,UAJE;AAKXC,YAAAA,MAAM,EAAE;AALG,WAFV;AASLE,UAAAA,KAAK,EAAE,EATF;AAULC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERK,YAAAA,SAAS,EAAE,CAFH;AAGRC,YAAAA,SAAS,EAAE;AAHH,WAVP;AAeLL,UAAAA,KAAK,EAAE,KAfF;AAgBLC,UAAAA,OAAO,EAAE;AAhBJ,SAnCF;AAqDPK,QAAAA,OAAO,EAAE;AACLlB,UAAAA,WAAW,EAAE,OADR;AAELE,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,KAAK,EAAE,SAFI;AAGXC,YAAAA,UAAU,EAAE,cAHD;AAIXC,YAAAA,OAAO,EAAE,UAJE;AAKXC,YAAAA,MAAM,EAAE;AALG,WAFV;AASLE,UAAAA,KAAK,EAAE,EATF;AAULC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WAVP;AAaLC,UAAAA,KAAK,EAAE,KAbF;AAcLC,UAAAA,OAAO,EAAE;AAdJ,SArDF;AAqEPM,QAAAA,KAAK,EAAE;AACHnB,UAAAA,WAAW,EAAE,OADV;AAEHE,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,OADK;AAEXC,YAAAA,KAAK,EAAE,QAFI;AAGXC,YAAAA,UAAU,EAAE,aAHD;AAIXC,YAAAA,OAAO,EAAE,UAJE;AAKXC,YAAAA,MAAM,EAAE;AALG,WAFZ;AAUHE,UAAAA,KAAK,EAAE,EAVJ;AAWHC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WAXT;AAcHC,UAAAA,KAAK,EAAE,KAdJ;AAeHC,UAAAA,OAAO,EAAE;AAfN,SArEA;AAsFPO,QAAAA,GAAG,EAAE;AACDpB,UAAAA,WAAW,EAAE,OADZ;AAEDE,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,KAAK,EAAE,UAFI;AAGXC,YAAAA,UAAU,EAAE,eAHD;AAIXC,YAAAA,OAAO,EAAE,UAJE;AAKXC,YAAAA,MAAM,EAAE,QALG;AAMXc,YAAAA,eAAe,EAAC;AAACC,cAAAA,MAAM,EAAC;AAAR;AANL,WAFd;AAUDb,UAAAA,KAAK,EAAE,EAVN;AAWDC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WAXX;AAcDC,UAAAA,KAAK,EAAE,KAdN;AAeDC,UAAAA,OAAO,EAAE;AAfR,SAtFE;AAuGPU,QAAAA,cAAc,EAAE;AACZvB,UAAAA,WAAW,EAAE,QADD;AAEZE,UAAAA,aAAa,EAAE;AACXsB,YAAAA,OAAO,EAAE,CACL;AAACf,cAAAA,KAAK,EAAE,SAAR;AAAmBgB,cAAAA,YAAY,EAAE;AAAjC,aADK,EAEL;AAAChB,cAAAA,KAAK,EAAE,UAAR;AAAoBgB,cAAAA,YAAY,EAAE;AAAlC,aAFK,CADE;AAKXC,YAAAA,OAAO,EAAC;AACJpB,cAAAA,OAAO,EAAE,UADL;AAEJC,cAAAA,MAAM,EAAE,QAFJ;AAGJH,cAAAA,KAAK,EAAE,UAHH;AAIJiB,cAAAA,eAAe,EAAC;AAACC,gBAAAA,MAAM,EAAC;AAAR,eAJZ;AAKJjB,cAAAA,UAAU,EAAC;AALP;AALG,WAFH;AAeZI,UAAAA,KAAK,EAAE,EAfK;AAgBZC,UAAAA,UAAU,EAAE,EAhBA;AAiBZE,UAAAA,KAAK,EAAE;AAjBK;AAvGT,OADP;AA4HJe,MAAAA,WAAW,EAAE,KA5HT;AA6HJC,MAAAA,OAAO,EAAE;AA7HL,K;;UAgIRC,Y,GAAe,UAAEC,KAAF,EAAa;AACxBA,MAAAA,KAAK,CAACC,cAAN;;AACA,YAAKC,QAAL,CAAe;AAAEJ,QAAAA,OAAO,EAAE;AAAX,OAAf;;AACA,UAAMK,QAAQ,GAAG,EAAjB;;AACA,WAAK,IAAIC,qBAAT,IAAkC,MAAKrC,KAAL,CAAWC,SAA7C,EAAwD;AACpDmC,QAAAA,QAAQ,CAACC,qBAAD,CAAR,GAAkC,MAAKrC,KAAL,CAAWC,SAAX,CAAqBoC,qBAArB,EAA4CzB,KAA9E;AACH;;AACD,UAAM0B,KAAK,GAAG;AACVC,QAAAA,WAAW,EAAE,MAAKC,KAAL,CAAWD,WADd;AAEVE,QAAAA,KAAK,EAAE,MAAKD,KAAL,CAAWC,KAFR;AAGVC,QAAAA,SAAS,EAAEN;AAHD,OAAd;AAKDO,MAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACF,K;;UAqBDO,mB,GAAsB,UAACZ,KAAD,EAAQa,eAAR,EAA4B;AAE9C,UAAMC,gBAAgB,qBACf,MAAK/C,KAAL,CAAWC,SADI,CAAtB;;AAGA,UAAM+C,kBAAkB,qBACjBD,gBAAgB,CAACD,eAAD,CADC,CAAxB;;AAGAE,MAAAA,kBAAkB,CAACpC,KAAnB,GAA2BqB,KAAK,CAACgB,MAAN,CAAarC,KAAxC;AACAoC,MAAAA,kBAAkB,CAACjC,KAAnB,GAA2B,MAAKmC,aAAL,CAAmBF,kBAAkB,CAACpC,KAAtC,EAA6CoC,kBAAkB,CAACnC,UAAhE,CAA3B;AACAmC,MAAAA,kBAAkB,CAAChC,OAAnB,GAA6B,IAA7B;AACA+B,MAAAA,gBAAgB,CAACD,eAAD,CAAhB,GAAoCE,kBAApC;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYI,kBAAZ;AACA,UAAIlB,WAAW,GAAG,IAAlB;;AACA,WAAK,IAAIgB,gBAAT,IAA4BC,gBAA5B,EAA8C;AAC1CjB,QAAAA,WAAW,GAAGiB,gBAAgB,CAACD,gBAAD,CAAhB,CAAkC/B,KAAlC,IAA2Ce,WAAzD;AACH;;AACD,YAAKK,QAAL,CAAc;AAAClC,QAAAA,SAAS,EAAE8C,gBAAZ;AAA8BjB,QAAAA,WAAW,EAAEA;AAA3C,OAAd;AACH,K;;;;;;;kCArCalB,K,EAAOuC,K,EAAO;AACxB,UAAIC,OAAO,GAAG,IAAd;;AAEA,UAAID,KAAK,CAACrC,QAAV,EAAoB;AAChBsC,QAAAA,OAAO,GAAGxC,KAAK,CAACyC,IAAN,OAAiB,EAAjB,IAAuBD,OAAjC;AACH;;AAED,UAAID,KAAK,CAAChC,SAAV,EAAqB;AACjBiC,QAAAA,OAAO,GAAGxC,KAAK,CAAC0C,MAAN,IAAgBH,KAAK,CAAChC,SAAtB,IAAmCiC,OAA7C;AAEH;;AAED,UAAID,KAAK,CAAC/B,SAAV,EAAqB;AACjBgC,QAAAA,OAAO,GAAGxC,KAAK,CAAC0C,MAAN,IAAgBH,KAAK,CAAC/B,SAAtB,IAAmCgC,OAA7C;AACH;;AAED,aAAOA,OAAP;AACH;;;6BAsBS;AAAA;;AACN,UAAMG,iBAAiB,GAAG,EAA1B;;AACA,WAAK,IAAIC,GAAT,IAAgB,KAAKxD,KAAL,CAAWC,SAA3B,EAAsC;AAClCsD,QAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACnBC,UAAAA,EAAE,EAAEF,GADe;AAEnBG,UAAAA,MAAM,EAAE,KAAK3D,KAAL,CAAWC,SAAX,CAAqBuD,GAArB;AAFW,SAAvB;AAIH;;AACD,UAAII,IAAI,GACJ;AAAM,QAAA,QAAQ,EAAE,KAAK5B,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKuB,iBAAiB,CAACM,GAAlB,CAAsB,UAAAC,WAAW;AAAA,eAC9B,oBAAC,YAAD;AACI,UAAA,GAAG,EAAEA,WAAW,CAACJ,EADrB;AAEI,UAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmBxD,WAFpC;AAGI,UAAA,aAAa,EAAE2D,WAAW,CAACH,MAAZ,CAAmBtD,aAHtC;AAII,UAAA,KAAK,EAAEyD,WAAW,CAACH,MAAZ,CAAmB/C,KAJ9B;AAKI,UAAA,UAAU,EAAEkD,WAAW,CAACH,MAAZ,CAAmBvD,UALnC;AAMI,UAAA,OAAO,EAAE,CAAC0D,WAAW,CAACH,MAAZ,CAAmB5C,KANjC;AAOI,UAAA,cAAc,EAAE+C,WAAW,CAACH,MAAZ,CAAmB9C,UAPvC;AAQI,UAAA,OAAO,EAAEiD,WAAW,CAACH,MAAZ,CAAmB3C,OARhC;AASI,UAAA,OAAO,EAAE,iBAACiB,KAAD;AAAA,mBAAW,MAAI,CAACY,mBAAL,CAAyBZ,KAAzB,EAAgC6B,WAAW,CAACJ,EAA5C,CAAX;AAAA,WATb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD8B;AAAA,OAAjC,CADL,EAaI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,KAAK,EAAC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAbJ,CADJ;;AAkBA,UAAK,KAAK1D,KAAL,CAAW+B,OAAhB,EAA0B;AACtB6B,QAAAA,IAAI,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;AACD,aACI;AAAK,QAAA,KAAK,EAAE;AAAEG,UAAAA,OAAO,EAAE;AAAX,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAE,EAAzB;AAA6B,QAAA,OAAO,EAAE,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADA,EAECH,IAFD,CADJ,CADF,CADF,CADA,CADJ;AAcH;;;;EAlOoBpE,S;;AAqOzB,eAAeO,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Spinner from './Spinner/Spinner';\nimport InputBuilder from \"./InputBuilder\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nclass FormRender extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                errorState:['error'],\n                elementConfig: {\n                    type: 'text',\n                    label: 'Name',\n                    helperText: 'Your Name',\n                    variant: \"outlined\",\n                    margin: \"normal\",\n                    errorText:'name should be unique'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    helperText: 'Street',\n                    label: 'Street',\n                    variant: \"outlined\",\n                    margin: \"normal\"\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    label: 'Postal Code',\n                    helperText: 'ZIP Code',\n                    variant: \"outlined\",\n                    margin: \"normal\"\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    label: 'Country',\n                    helperText: 'Your Country',\n                    variant: \"outlined\",\n                    margin: \"normal\"\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    label: 'E-mail',\n                    helperText: 'Your E-Mail',\n                    variant: \"outlined\",\n                    margin: \"normal\",\n                    \n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            dob: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'date',\n                    label: 'Birthday',\n                    helperText: 'Your Birthday',\n                    variant: \"outlined\",\n                    margin: \"normal\",\n                    InputLabelProps:{shrink:true}\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ],\n                    configs:{\n                        variant: \"outlined\",\n                        margin: \"normal\",\n                        label: 'Delivery',\n                        InputLabelProps:{shrink:true},\n                        helperText:'Select your delivery method'\n                    }\n                },\n                value: '',\n                validation: {},\n                valid: true\n            }\n        },\n        formIsValid: false,\n        loading: false\n    }\n\n    orderHandler = ( event ) => {\n        event.preventDefault();\n        this.setState( { loading: true } );\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.price,\n            orderData: formData\n        }\n       console.log(order);\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n            \n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n       \n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        const updatedFormElement = { \n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        console.log(updatedFormElement);\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    }\n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <InputBuilder \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        errorState={formElement.config.errorState}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button variant=\"contained\" color=\"primary\" >Order</Button>\n               \n            </form>\n        );\n        if ( this.state.loading ) {\n            form = <Spinner />;\n        }\n        return (\n            <div style={{ padding: 20 }}>\n            <Grid container spacing={24} justify={\"center\"}>\n              <Grid item xs={6}>\n                <Card>\n                    <CardContent>\n                    <h4>Enter your Contact Data</h4>\n                    {form}\n                    </CardContent>\n                </Card>\n                </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nexport default FormRender;"]},"metadata":{},"sourceType":"module"}